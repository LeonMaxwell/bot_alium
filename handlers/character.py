from contextlib import suppress

from aiogram import types
from aiogram.dispatcher import FSMContext
import asyncio

from aiogram.utils.exceptions import MessageCantBeDeleted, MessageToDeleteNotFound

from keyboards.possybility import Power
from loader import dp
from states.create_charachters import CreateCharacters
from states.power_lang import kb_client, kb_client1
from utils.api_db.initial_bd import check_id, create_characters, get_info_character, add_id


@dp.message_handler(commands=['start'], state='*')
async def command_start(message: types.Message):
    check = check_id(message.from_user.id)
    if check:
        pass
    else:
        add_id(message.from_user.id)
        await message.answer("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è üëã")
        await message.answer("–¢—ã –ø–æ–ø–∞–ª –≤ –≤–µ–ª–∏–∫–æ–ª–µ–ø–Ω—ã–π –º–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –º–∏—Ä –ê–ª–∏—É–º. –ú–µ–Ω—è –∑–æ–≤—É—Ç –î–æ—Ä—å–µ–Ω. –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞ "
                             "–Ω–∞—á–∞–ª—å–Ω—ã—Ö —ç—Ç–∞–ø–∞—Ö —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —ç—Ç–æ–º –º–∏—Ä–µ.")
        await message.answer("–°—Ä–∞–∑—É —Å–∫–∞–∂—É —á—Ç–æ —Ç—ã, —è –∏ —Ç–∞–∫–∏–µ –∫–∞–∫ —Ç—ã, –º–∏—Å—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞—Å–∞ –ê–ª–∏—É—Å. –ú—ã –æ—Ç–ª–∏—á–∞–µ–º—Å—è –æ—Ç –∑–µ–º–Ω—ã—Ö "
                             "—Ä–∞—Å, —Ç–∞–∫–∏—Ö –∫–∞–∫ –ª—é–¥–∏, –≥–Ω–æ–º—ã, —ç–ª—å—Ñ—ã –∏ —Ç.–ø. –í –Ω–∞—Å –∑–∞–∫–ª—é—á–µ–Ω–∞ –æ–≥—Ä–æ–º–Ω–∞—è —Å–∏–ª–∞ –∏ –º—ã –Ω–∞—É—á–∏–ª–∏—Å—å "
                             "–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å –ø–æ–º–æ—â—å—é —è–∑—ã–∫–∞ Python.")
        await asyncio.sleep(10)
        await message.answer("–Ø –∫–∞–∫ —Ç–≤–æ–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫, –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞—É—á–∏—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–≤–æ—é —Å–∏–ª—É. –Ø –æ–±—É—á—É —Ç–µ–±—è —á–µ–º "
                             "–∑–Ω–∞—é, –Ω–æ –≤ –Ω–∞—à–µ–º –º–∏—Ä–µ, –µ—Å—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–æ –¥—Ä—É–≥–∏—Ö –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ç–∞–∫ –∂–µ –ø–æ–º–æ–≥—É—Ç "
                             "–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏–ª—É –≤ —É–≥–ª—É–±–ª–µ–Ω–Ω–æ–º —Å–º—ã—Å–ª–µ.")
        await message.answer("–Ø –¥–∞—é —Ç–µ–±–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏–ª—É —è–∑—ã–∫–∞.")
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–≤ —ç—Ç—É –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ç—ã —Å–º–æ–∂–µ—à—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –º–∏—Ä–æ–º –∏—Å–ø–æ–ª—å–∑—É—è –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–π "
                             "—è–∑—ã–∫ Python.")
        await asyncio.sleep(10)
        await message.answer("–ò —Ç–∞–∫, –Ω–∞—á–Ω–µ–º —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞.")
        await message.answer("–Ø –ø—Ä–æ —Ç–µ–±—è, –æ—Å–æ–±–æ –Ω–µ—á–µ–≥–æ –Ω–µ –∑–Ω–∞—é, –Ω–æ –º–Ω–µ –∏ –¥—Ä—É–≥–∏–º –∫–∞–∫ —Ç–æ –Ω–∞–¥–æ –∫ —Ç–µ–±–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è. –ù–∞–∑–æ–≤–∏ "
                             "—Å–µ–±—è –∫–∞–∫ —Ö–æ—á–µ—à—å.")
        await message.answer("–î–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã –≤–µ—Å—å –º–∏—Ä –≤–∏–¥–µ–ª —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–æ–æ–±—â–∏—Ç—å, —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–≤–µ—Å—Ç–∏ —Å–ª–µ–¥—É—é—â—É—é "
                             "–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é. ")
        await message.answer("<code>print([–¢–æ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ –≤ –º–∏—Ä])</code>", parse_mode='HTML')
        await asyncio.sleep(10)
        await message.answer("–ö–æ–Ω–µ—á–Ω–æ, –∫ –ø—Ä–∏–º–µ—Ä—É —è —Å–º–æ–≥—É –≤—ã–≤–µ—Å—Ç–∏ —Å–≤–æ–µ –∏–º—è, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–≤ —Å–ª–µ–¥—É—é—â–µ–µ: ")
        await message.answer('<code>print("–î–æ—Ä—å–µ–Ω")</code>', parse_mode='HTML')
        await asyncio.sleep(10)
        await message.answer("–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–¥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–≤—ã—á–∫–∏, –Ω–µ–≤–∞–∂–Ω–æ –¥–≤–æ–π–Ω—ã–µ –æ–Ω–∏ –∏–ª–∏ –Ω–µ—Ç")
        await message.answer("–í –¥–∞–ª—å–Ω–µ–π—à–∏—Ö —É—Ä–æ–∫–∞—Ö —è —Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ –æ–±—ä—è—Å–Ω—é, –∑–∞—á–µ–º –æ–Ω–∏ –Ω—É–∂–Ω—ã, –∞ —Å–µ–π—á–∞—Å –ø—Ä–æ—Å—Ç–æ –≤—ã–≤–µ–¥–∏ –º–Ω–µ "
                             "—Ç–æ –∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç", reply_markup=kb_client)


async def delete_message(message: types.Message, sleep_time: int = 0):
    await asyncio.sleep(sleep_time)
    with suppress(MessageCantBeDeleted, MessageToDeleteNotFound):
        await message.delete()


@dp.message_handler(lambda message: message.text == "–°–∏–ª–∞ —è–∑—ã–∫–∞")
async def used_power_language(message: types.Message):
    check = check_id(message.from_user.id)
    if check:
        await Power.activate.set()
        text = await message.answer("–í—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å [–°–∏–ª–∞ —è–∑—ã–∫–∞]")
        asyncio.create_task(delete_message(text, 10))
    else:
        await message.answer("–ü–æ–∫–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ –¥–∞–Ω–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π –≤–µ—Å—Ç–∏ /start")


@dp.message_handler(state=Power.activate)
async def input_code(message: types.Message, state: FSMContext):
    if message.text.startswith("print"):
        open_instr = message.text.split("print")[1]
        if open_instr.startswith("("):
            open_instr = open_instr.split("(")[1]
            if open_instr.endswith(")"):
                open_instr = open_instr.split(")")[0]
                if open_instr.startswith("'") and open_instr.endswith("'"):
                    result = open_instr.replace("'", "")
                    await Power.input_code.set()
                    async with state.proxy() as data:
                        data['result_code'] = open_instr
                    await input_login(message, state)
                elif open_instr.startswith('"') and open_instr.endswith('"'):
                    result = open_instr.replace('"', '')
                    await Power.input_code.set()
                    async with state.proxy() as data:
                        data['result_code'] = open_instr
                    await input_login(message, state)
                else:
                    await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Ç—Ä–æ–∫–æ–≤–æ–≥–æ –ª–∏—Ç–µ—Ä–∞–ª–∞.")
                    await Power.error.set()
                    await put_error(state=state, message=message)
            else:
                await message.answer("–ú–Ω–µ –∫–∞–∂–µ—Ç—Å—è –∏–ª–∏ —Ç—ã –∑–∞–±—ã–ª –≥–¥–µ —Ç–æ —Å–∫–æ–±–æ—á–∫—É, –æ–Ω–∞ –æ—á–µ–Ω—å –≤–∞–∂–Ω–∞")
                await Power.error.set()
                await put_error(state=state, message=message)
        else:
            await message.answer("–ú–Ω–µ –∫–∞–∂–µ—Ç—Å—è –∏–ª–∏ —Ç—ã –∑–∞–±—ã–ª –≥–¥–µ —Ç–æ —Å–∫–æ–±–æ—á–∫—É, –æ–Ω–∞ –æ—á–µ–Ω—å –≤–∞–∂–Ω–∞")
            await Power.error.set()
            await put_error(state=state, message=message)
    else:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–ø–∏—Å–∞–Ω–∏–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏")
        await Power.error.set()
        await put_error(state=state, message=message)


@dp.message_handler(state=Power.input_code)
async def input_login(message: types.Message, state: FSMContext):
    check = check_id(message.from_user.id)
    if check:
        await message.answer("–¢—ã —É–∂–µ —Å–æ–∑–¥–∞–ª –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è —ç—Ç–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞, –∞ –±–æ–ª—å—à–µ —Å–æ–±—ã—Ç–∏–π –µ—â–µ –Ω–µ—Ç.")
    else:
        result_code = await state.get_data()
        if result_code['result_code']:
            try:
                create_characters(id=message.from_user.id, login=result_code['result_code'].replace("'", ""))
                answer = "–û, –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–µ –∏–º—è {}, —á—Ç–æ –∂ —Ç–µ–ø–µ—Ä—å —è –∑–Ω–∞—é –∫–∞–∫ –∫ —Ç–µ–±–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è, " \
                         "–º–æ–∂–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å. ".format(result_code['result_code'].replace("'", ""))
                await state.finish()
                await message.answer(answer)
                await message.answer("–¢–µ–ø–µ—Ä—å —Ç—ã —É–∂–µ –∫–∞–∫ –º–∏–Ω–∏–º—É–º –ø–æ–Ω–∏–º–∞–µ—à—å, –∫–∞–∫ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏–ª—É —è–∑—ã–∫–∞ Python.")
                await message.answer("–ù–æ —ç—Ç–æ —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–æ, –¥–∞–ª—å—à–µ –±—É–¥–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ.")
                await asyncio.sleep(5)
                await message.answer("–¢—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–æ–∑–¥–∞–ª —Å–≤–æ–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, –æ–Ω –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —Ç–µ–±–µ –∏ –ø–æ—ç—Ç–æ–º—É —è –¥–∞–º —Ç–µ–±–µ "
                                    "–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å, –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–≤–æ–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ.", reply_markup=kb_client1)
                await message.answer("–ú–æ–∂–µ—à—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å, —É–≤–∏–¥–∏—à—å —á—Ç–æ —Ç—ã –∏–∑ —Å–µ–±—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—à—å.")
            except Exception as e:
                await state.finish()
                await message.answer("–° —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º –ø–µ—Ä—Å–æ–Ω–∞–∂ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")


@dp.message_handler(state=Power.error)
async def put_error(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –¥–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞!")


@dp.message_handler(lambda message: message.text == "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ")
async def info_character(message: types.Message):
    try:
        info = get_info_character(message.from_user.id)
        info = info[0]
        rank_character = None
        type_weapon = None
        if info[3] == 0:
            rank_character = "–ù–∞—á–∏–Ω–∞—é—â–∏–π –æ—Ö–æ—Ç–Ω–∏–∫"
        elif info[3] == 1:
            rank_character = "–û—Ö–æ—Ç–Ω–∏–∫"
        elif info[3] == 2:
            rank_character = "–û–ø—ã—Ç–Ω—ã–π –æ—Ö–æ—Ç–Ω–∏–∫"
        elif info[3] == 3:
            rank_character = "–û—Ö–æ—Ç–Ω–∏–∫ —Å–æ —Å—Ç–∞–∂–µ–º"
        elif info[3] == 4:
            rank_character = "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π –æ—Ö–æ—Ç–Ω–∏–∫"
        if info[4] == "NON":
            type_weapon = "–ë–µ–∑ –æ—Ä—É–∂–∏—è"
        elif info[4] == "BLD":
            type_weapon = "–ë–ª–∏–∂–Ω–µ–µ –æ—Ä—É–∂–∏–µ"
        elif info[4] == "BOW":
            type_weapon = "–î–∞–ª—å–Ω–µ–µ –æ—Ä—É–∂–∏–µ"
        elif info[4] == "MGC":
            type_weapon = "–ú–∞–≥–∏—á–µ—Å–∫–æ–µ –æ—Ä—É–∂–∏–µ"
        result_info = f"–†–∞—Å–∞: üßñ–ê–ª–∏—É—Å\n–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä: {info[1]}\n–ò–º—è: {info[2]}\nüèÖ–£—Ä–æ–≤–µ–Ω—å: {info[15]}\n" \
                      f"‚ô•–ó–¥–æ—Ä–æ–≤—å–µ: {info[16]}\nüéñ–†–∞–Ω–≥: {rank_character}\n‚öú–ö–ª–∞—Å—Å: {type_weapon}\nüèÜ–†–µ–π—Ç–∏–Ω–≥: {info[5]}\n" \
                      f"‚öî–£–±–∏–π—Å—Ç–≤–æ –º–æ–Ω—Å—Ç—Ä–æ–≤: {info[6]}\nüèµ–ë–ª–∞–≥–æ—Å–ª–∞–≤–ª–µ–Ω–∏–µ –ê–ª–∏—É–º–∞: {info[7]}\n" \
                      f"‚ô¶–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∫–≤–µ—Å—Ç—ã: {info[8]}\nüìú–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å–≤–∏—Ç–∫–∏ –∑–Ω–∞–Ω–∏–π: {info[9]}\nüí†–ö–æ–ª-–≤–æ —è—á–µ–µ–∫ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π:" \
                    f" {info[10]}\nüéí–ö–æ–ª-–≤–æ —è—á–µ–µ–∫ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ: {info[11]}\n\nüü°–ó–æ–ª–æ—Ç–æ: {info[12]}\nüíé–ê–ª–º–∞–∑—ã: " \
                    f"{info[13]}\nü™ô–ê–ª–∏–∞–º–∏–Ω–∞—Ç—ã: {info[14]}\n\nüó°–£—Ä–æ–Ω: {info[17]}\nü™Ñ–ú–∞–≥–∏—á–µ—Å–∫–∏–π —É—Ä–æ–Ω: {info[18]}\n" \
                    f"üîÜ–°–∏–ª–∞ –ê–ª–∏—É–º–∞: {info[19]}\nüí™üèª–°–∏–ª–∞: {info[20]}\nü¶µ–õ–æ–≤–∫–æ—Å—Ç—å: {info[21]}\nü´Å–í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å: {info[22]}\n" \
                    f"üëÄ–ò–Ω—Ç—É–∏—Ü–∏—è: {info[23]}\nüçÄ–£–¥–∞—á–∞: {info[24]}\nüß†–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç: {info[25]}\nüõ°–ó–∞—â–∏—Ç–∞: {info[26]}\n" \
                    f"üîÆ–ú–∞–≥–∏—á–µ—Å–∫–∞—è –∑–∞—â–∏—Ç–∞: {info[27]}\nüí¢–®–∞–Ω—Å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —É—Ä–æ–Ω–∞: {info[28]}\nü©∏–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É—Ä–æ–Ω: {info[29]}"
        await message.answer(result_info)
    except Exception:
        await message.answer("–ü–æ–∫–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ –¥–∞–Ω–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π –≤–µ—Å—Ç–∏ /start")
